// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/colours.txt
// data/dogs.txt
// data/metals.txt

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataColoursTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x57\x5d\xbe\xfb\xa0\xaa\x7d\x67\x30\x77\x4e\x44\x49\x64\x17\xc5\x8d\xda\xec\x74\x46\x67\x1c\x67\x62\xf7\xb7\xec\xff\x3c\x74\x81\xc6\x0f\x54\x60\x51\x3e\x86\xdb\x9a\x42\x9c\x34\x13\x4b\x38\xf1\x19\x9a\xb8\x11\x6b\x10\x1b\x1f\x3c\xa6\x40\xd3\x24\xc4\x66\xfe\x10\x5b\xf5\x96\x89\x2b\x07\xb7\x59\xa0\x7c\xbc\x11\xd7\x03\x03\xab\xcc\xf2\x8c\x49\xdc\x72\x38\x16\x6d\x53\x7f\x97\x10\x3b\x71\xef\x26\xc4\x3d\x34\xf9\x24\xfe\x5d\xbc\xa1\x72\x68\x13\xe2\x48\x53\x13\x71\xd4\x87\x38\xa6\xa6\xe2\x2f\xf4\x3e\xa6\x59\x88\x47\x21\x1e\x9d\x83\xaf\x35\x88\xa7\x57\x8c\x5d\xc7\x8a\x46\xbc\x42\xdc\xb4\x11\xbf\x3d\x71\x76\xe2\xcf\x0a\xa1\x83\x1b\x37\xa6\x83\xe3\x50\xb4\xa2\xd1\xc1\x73\x9a\x8c\xa2\x9d\x0e\xe1\x05\x78\x4b\xd0\x21\x7a\x09\x1d\x7a\xd1\xa1\x03\xc6\x1e\x3a\x26\x56\xd0\x89\xc3\x7f\xc5\xb8\x45\x26\x1d\xc6\xe9\x05\x6c\xa9\x48\xa6\xc3\x64\xd1\x61\xfa\xf9\x70\xa0\x85\x8b\x39\xcc\x1d\x88\x75\x6c\xc9\xd4\x73\x19\xb4\x51\xe8\x70\x13\x3a\xbc\x01\x60\x09\x1d\xc1\x2d\x3f\x74\x84\x62\xd5\xd0\xab\x4c\x08\x33\xe5\xb6\xb5\xb6\xbb\xa7\x62\x72\x78\xfb\x60\x8a\xdf\x8d\x8e\x58\x6d\xdc\x7b\xd6\xca\x74\xac\xf3\xa4\x63\xc5\xb5\xf6\x6a\x2b\xec\xb9\xb7\x11\x2b\x9a\x8e\x6d\xe8\x0a\x2c\xf8\x7c\xf0\x1e\xd8\xff\xab\xad\x4a\x89\xb3\x4c\x60\xfd\xb6\xce\xff\xfe\x87\x12\xd7\x23\x34\x5f\x02\x4d\x6c\xa3\x53\xe2\xc6\xf1\x40\x64\x60\x0f\x05\x2e\x4c\x8e\xac\x8d\x31\x2e\xf4\x38\x84\x1b\xb4\x8a\x7d\x12\x47\xe3\xa9\xbe\x7b\x9a\xe0\x5c\xd0\xf0\x5c\x0c\x25\x1c\xd3\xc7\x34\x99\x7b\xcc\xe4\xfb\x60\x4a\x92\x39\x28\x89\x71\x46\xaf\x98\x8c\x29\x90\xf0\x90\x24\xa1\x03\xad\x58\xb6\xb7\xba\x28\x15\xae\x9d\x2f\xec\x57\x38\x92\xc3\x94\xc2\x81\x69\x98\x5f\x38\xea\xc6\x19\xb2\x30\xb5\x48\xe0\x20\x45\xc6\x6c\xb0\xbf\xa8\x29\x10\x36\x15\x6d\xb2\xc7\x78\x72\x63\x6c\x5b\xc2\xab\x50\xd2\x26\x21\xbe\x06\xb4\xc6\x07\x0c\x84\x52\xb1\x83\xce\xed\xc3\x90\x68\x1a\x07\xee\xd4\x0f\x36\x88\xe4\x4c\xc9\xcf\x53\x84\x92\xdb\xaa\x87\xa2\xdd\x2e\xa7\xe4\x6e\x94\xbc\x77\x09\x4a\xfe\xbb\xc4\x76\x6c\x24\x0f\x1c\xc1\x23\xfb\x1b\x27\xf4\xf8\x82\xd8\xee\x6d\xa7\xf9\xbd\x67\x44\x1b\x6a\x2f\x4a\x3e\x10\x0f\xc9\xe7\x3e\xaf\x3f\x0e\xbb\x43\xb8\x52\x0a\xad\x03\x9d\xf1\x8c\x89\x45\x97\xcd\x15\x92\x29\x3d\x58\xf9\x41\xd0\xa6\x27\x19\x57\x69\x94\x39\x5e\x80\x59\x7d\xcd\x42\x59\xa4\x53\x96\xa6\x95\xb2\x0c\x89\x49\x19\xaa\xe7\x4b\x82\xb2\x5f\xdb\xc7\x72\xf0\x41\x79\xbd\x84\xf2\x9a\xa9\x90\x70\xcc\x42\x72\x78\x7b\x48\x52\x2c\x12\x09\x15\x92\xeb\xea\x06\xa7\x96\xeb\x1a\x05\x07\x91\xeb\xe9\x13\xfe\x80\xe8\x6b\x57\xf0\x22\x31\x49\x33\x34\x91\x54\x09\xb6\x4c\x02\x27\x6a\x49\x48\xda\x65\x08\x02\x09\x6d\xb4\x7d\xe5\x44\x36\xba\x21\x16\x9d\xdc\x32\xe3\x3e\x4f\x1e\x45\xf7\xc7\xbb\xd1\x29\x96\xf7\xb2\xa7\x44\xa3\x53\xc5\x32\x30\x1e\x3a\x35\x64\xc3\x37\xf0\x4e\x9c\x1e\xf8\x47\xa7\x69\x4c\x3a\x6d\x3f\xc0\x69\xcb\x43\x46\x92\x36\xe9\x84\x36\xe9\x0c\x69\xa9\xd0\x19\x3e\xe6\xa1\x53\xe8\x5c\xa9\x0c\x65\x3a\x97\xbd\xe1\x1c\xe7\xfa\x7c\x1e\xba\x58\xdb\x38\x3c\x9c\x2e\xae\x87\x5f\x42\x97\x34\xc1\xc9\xae\xe2\x63\xd2\x65\xbc\x12\x86\x5f\xe6\x63\x3c\x74\x39\x5d\x6e\x79\x83\xb4\x7f\x22\x3c\xd3\x15\xdc\xb0\x0d\x64\x7b\x20\x00\x82\x31\xb1\xcc\x9c\xae\xd5\xaa\xe0\x61\x0b\x37\xfc\x06\xd3\xf6\xfc\xdf\xa5\x68\xc7\x1b\x56\x17\x61\x80\xa9\xcf\xf0\x2e\x54\xdc\xfe\x65\x88\xe2\x4d\x9e\x2c\x37\x14\xb7\x65\x8b\x8a\x4f\x2a\xab\x21\xf1\x69\x92\x43\xe2\x22\x4d\x53\xb6\x7f\xab\xd9\xaa\x8a\x80\x6e\x17\x69\xed\x12\xca\x46\xda\x52\xb9\x3d\x2a\x69\xcb\xd2\xa5\xe5\xfd\x62\xda\xb2\xf2\x17\xdb\x16\x97\x93\x62\xd9\x6f\x3e\xc0\xbc\xd0\x41\x1a\x21\x43\xc7\xd4\xc3\x84\x74\xf0\x21\x66\x7b\xab\xc9\x3b\x59\xe8\xdb\xe3\xa1\x1f\xce\x42\x3f\xdc\x79\xc7\xe6\x0f\x8f\x9d\x5c\x7e\xf8\xf3\x39\x76\x28\xff\xc8\xa4\x1f\x6f\xbf\x4b\x8d\x7e\x16\x3e\xad\x76\x99\xd0\x4b\xcc\x1e\x7a\x49\xef\x62\xf4\x92\x87\x5e\x85\x5f\x4a\x2f\x3f\x04\xb0\x35\x4d\x85\xe9\xe5\xf5\x58\xf4\x1a\x8b\x8c\xdb\xb5\x34\x93\x71\xd7\x41\xc6\x43\x82\x0c\x14\x63\x64\xfc\x66\x00\x8e\x88\xce\xbb\x91\x09\xe2\xdf\xf4\x90\x98\x0f\xd9\x4e\xe0\xa6\xc6\x89\x4c\xab\x90\x69\x4b\x6e\x18\xd0\x04\xb8\xc7\x0e\x09\x86\xdc\x0c\x60\x0a\x06\x32\x7d\x6b\xa6\xca\x48\x8d\x4d\xa9\x72\xc6\x0e\x95\x2f\x69\x93\x21\x35\x01\x9b\x9b\xa2\x59\xfc\xe2\xf6\x50\x65\xfd\x08\x55\xfe\xf1\x10\x33\x68\xc6\xa9\xc0\x5d\x2a\x37\x9e\xb2\x65\x06\xbd\x42\xb9\x1c\x38\x75\x50\x45\xbe\x06\xea\x76\xba\xca\xe1\x8e\x21\xeb\x2d\x5f\x34\xb8\x66\xe5\x3f\xad\xab\x52\x65\xec\xf4\x30\x55\xc9\xa0\x88\x2a\x3b\xf0\xaa\x18\x26\xc1\xf7\x0c\xd6\xc9\xdf\xae\x1b\xaa\xe6\x0c\x53\x34\xb7\x7d\x19\x55\x5f\xa0\xe4\xaa\x55\xa9\x2a\xac\x41\xa3\x5d\x00\x5c\x47\xd5\x86\x41\x63\x3e\x54\x3d\x0b\x55\x8f\xb6\x3f\xfb\x18\x54\x7d\xb5\xc9\x30\x1f\x0a\xd8\x5b\x1a\xd5\xb1\xa8\x2e\xfb\x3e\x7c\x5d\x63\x82\x7a\xeb\x13\xb8\xcd\xfa\x0c\x50\x44\xe3\x0c\x96\x7f\x39\x35\xee\x26\x83\x1a\xbf\xf9\x07\xad\xf7\x43\x4d\xbc\x51\x93\x9b\x9a\xa6\x97\x18\xb5\x87\xdb\x87\xc9\x13\xc8\xc4\x53\x09\x21\xdc\x8a\xe3\x65\x36\xc2\xd5\xbc\x3d\x7f\xe4\x9d\x8d\xbc\x4b\x30\x79\x70\xbb\x84\x3c\x52\xd1\x4c\xbe\xc8\x17\x22\xc6\xd7\x0c\xbe\x36\x4b\xf8\xdf\xb7\x10\xf0\xbf\xd3\x23\x53\xe7\xa4\xa7\x26\xea\xfc\xd2\x31\xb9\x51\x67\x43\x1c\x81\x61\x3a\x1b\xa0\x8d\x87\x3a\xbb\x39\x75\xee\xb8\x70\x94\x3b\x19\x5c\xd7\x39\x52\xa9\x48\x43\x9d\x11\x34\x1d\x55\x99\x51\xe7\x19\x8a\x4f\xd4\x85\xbf\x18\x1b\xec\x21\xc4\xe6\xad\xed\x85\x95\x25\x2a\xb7\x3d\x5b\x62\x20\xa8\xb6\xac\xf0\xdc\x2e\x37\xec\xee\xc5\xfc\x8f\x7a\x99\x85\xb1\x3d\x48\x48\x04\x72\xfa\x0e\xf1\xae\xd7\xf5\x50\xc7\x4d\x74\xd4\x24\x1d\x67\x48\x45\x9d\xfa\x3e\xc5\xaa\xd4\xed\x1f\x74\xea\x6e\xdf\xaa\xa3\xfb\x6e\x75\xbc\x11\x75\x8f\x69\xdc\xd0\x7b\xc3\xbb\x7b\x68\x4b\x3b\x95\xf7\xf0\x24\x63\x50\x0f\x84\x6e\x8f\x35\xbe\x56\x8e\x07\x45\x16\x38\x91\xfa\x4a\x42\x7d\x99\x55\x7c\x58\xb5\xbf\x14\x32\x50\x51\x42\x2c\x30\x3b\xfd\x2e\x64\xc6\xdf\x85\xa4\x8e\x04\xc8\x29\x34\xa3\xdc\xc2\x3d\x26\x36\x0a\xd6\xa1\x8d\x82\x7f\xb8\x50\xf0\xe8\x5f\x2f\x0a\xbe\x09\x9c\x18\x92\x77\x56\x0c\xd9\x75\x31\xfc\x33\xca\x33\x4b\xa5\xd0\x54\x28\xf4\x34\xa1\xf0\x03\x4b\x78\x7a\xc9\xa4\xf0\x1f\xa7\x70\x58\x15\x3e\x64\xc3\x77\x09\x1f\x03\x5f\xc6\x43\xe1\x0f\xb6\x5e\xa0\xda\x58\x07\x2e\x31\xd6\xf1\x50\xac\x13\x8e\x82\xe3\x62\xa5\x7f\xa7\x8e\x35\x76\x63\x3e\x34\x38\x05\x78\x79\x3a\x0d\xde\x61\x35\xf8\x94\xfd\xe1\x3c\x51\x68\x0c\xbe\xd0\x87\x82\x9c\x06\xae\x76\xec\xda\x6c\x70\xc7\xaf\x17\xd0\xdc\xc0\xfb\xd0\x48\x20\x85\x49\x23\x15\x5e\x63\x40\xa2\xf4\x18\xc2\xf8\x6d\xe5\xcb\xca\x63\x73\x30\x5c\x7f\x48\x57\xa6\x51\x38\xfb\x0d\x51\x71\x64\x1a\x05\x57\x3c\x8a\xd6\x0a\x4e\xb8\xa0\xb6\x87\x46\xf1\xf4\xda\x4d\x95\xd6\x98\x86\x1a\xf2\xda\xd0\xe6\x7b\x15\xfd\x7c\x6c\x7f\x46\xea\x35\x3f\x4f\x1a\xaf\x87\xc6\x2e\xb0\x86\x69\x7d\x68\x54\xdd\xe1\x3d\xaa\xe3\x4b\xc3\xa6\x6e\x9a\x69\x78\xd3\x44\xa3\x73\x12\x20\x0a\x5a\x1a\xfd\xbb\xf7\xfc\x3f\xda\xbe\x35\xa6\x88\xd1\x98\x0a\xc0\x6b\x8e\x75\xa1\x1b\x2c\x80\x85\x56\x03\x71\x8e\xd5\x70\xd3\x63\xa1\xdc\xfa\xd6\xf3\xe3\x09\x4e\xa8\x09\x11\x92\x13\x31\xbd\x89\x6e\xee\x74\x39\x39\x26\x4d\x5e\x5d\x68\x0a\xe3\x67\x34\xc5\xe4\x7f\x79\x79\x4a\x6b\xff\xfd\x0f\x4d\x89\x60\x9a\x45\x51\xc6\xd2\x2c\x6b\x13\xd7\xd4\x84\xe0\x9b\x7a\x9e\xc8\xd5\x53\xf1\xff\xe8\x76\x3b\x69\xea\xe4\x86\x4c\x3a\xbd\xf2\x74\x02\x27\x6f\xef\x9c\xb1\x84\x66\x3c\x1d\xd3\xd7\x39\x07\xcd\x55\x0f\x93\x5b\x24\xd3\x5c\xf1\xbb\x1c\xd9\x60\xae\x9d\xeb\xe6\x1a\x69\x0f\x84\x78\x68\xde\xfa\xa5\x9f\xf9\x04\xf6\x5f\x4c\xcb\x66\xfc\xc3\x7f\x7f\xb2\xd6\xfe\x93\xb6\xda\x61\x48\x18\x92\x69\xa1\xba\xd8\xe2\x8d\x9c\x30\x1f\x42\x3d\xb1\x13\xfc\xea\xb4\xfa\xc8\x70\x8a\x85\x2a\x04\x6b\x0e\x3e\x99\x50\x92\xbe\xb9\xa9\x19\xd3\x5b\x2e\x1e\xf4\x96\x26\xbb\x94\x7b\x4b\x64\xbd\x90\xa2\xde\x12\x55\x37\xe1\xbd\x05\x9c\x96\x98\xde\xea\x70\xc1\xb7\x86\xee\xa2\xe0\xbd\x49\xef\xed\x36\xe9\x46\x85\x7e\xef\x32\xe5\xde\x04\x76\xab\x65\xba\xb5\xe5\xe1\x01\x89\x9e\x5d\x93\x7c\xc5\xb7\x04\xba\x15\x7f\x4e\x95\x69\x47\xdc\x1f\x37\xce\x0b\x62\x16\x4d\xf4\x20\xa9\x3e\xdf\xa3\x7c\xc5\x77\xd2\xa3\xad\x36\xfa\x20\x82\x84\x3e\x48\x50\xff\x1f\x00\x00\xff\xff\xc1\x7f\x16\x6c\x06\x0f\x00\x00")

func bindataDataColoursTxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataColoursTxt,
		"data/colours.txt",
	)
}



func bindataDataColoursTxt() (*asset, error) {
	bytes, err := bindataDataColoursTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/colours.txt",
		size: 3846,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1607092702, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataDogsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x53\x51\xb6\xeb\x20\x08\xfc\x67\x97\x44\x89\x70\x35\xe2\x41\x6d\xda\xae\xfe\x1d\x34\x7d\x1f\x95\xa9\x22\x83\xc3\x04\x4f\x8c\x6a\x80\xe7\x49\x95\x27\xf2\xc4\x8d\x9b\xd4\x1e\x98\x0c\x30\x1f\xd8\x19\x30\xcb\x40\xc0\x99\x92\x10\xe0\xec\x5d\x28\xaa\xc6\xf2\xfb\xd3\xf4\x02\xfc\xe2\x8d\x99\xe1\x40\x3b\x68\xc0\x81\x9d\xea\x9f\x78\xec\x8b\xe4\x20\x3c\x66\x29\x1e\x53\xa1\x1d\x84\x7c\xdf\xea\xaf\xda\x51\x54\x23\xeb\xac\x11\x0e\x0d\xd9\x4f\x95\xec\x50\x2a\x70\x68\xd1\x54\xa9\x13\x1c\x6a\xbb\xa0\xda\xef\x9a\xda\x57\x05\x0e\xed\x2c\xec\xa1\x8b\x6f\xbe\x9f\xb4\x37\x3d\xeb\xff\xf4\xf7\x85\x43\xb0\x3a\xba\x49\x8a\x9f\x9b\xa0\x45\x0f\x63\x60\xfd\xc0\x61\xca\x5a\x2e\x3f\x99\x29\x81\x77\xbe\xab\xcd\x52\xa2\xee\x8d\x0b\xfb\x90\xf3\x7c\xf0\x2a\x18\xf0\x85\x81\x75\x03\xcf\xf7\xd8\x54\x21\x30\x1e\xbb\xed\xc0\x5b\x80\xc0\x92\xc4\xd7\x47\xf8\xc0\xb2\xf4\x08\x2c\x55\x35\x7b\xf4\x3a\x2c\x4d\x56\xb8\x89\xaa\xf8\x35\xb5\xbc\xe2\x4c\xbe\xf4\xfc\x81\xa0\x21\xe3\xbe\xec\x68\xf1\x69\x29\x9e\xa5\x96\xc4\x59\x23\x06\xde\x73\x58\x88\x5d\xe2\x88\xbf\xb6\x23\x56\x7f\x48\xd4\xc3\x45\x32\x88\x5b\xfc\xe8\xb7\x7d\x75\xc2\xa8\x6f\x1f\xb4\x3a\x28\x04\xd1\xe8\x45\x06\x34\x0d\xbb\x33\x9f\x46\x35\xf0\xd0\xba\x90\x3f\x30\x79\x35\xaf\x9e\xb4\xc4\x45\xed\x80\xea\x33\x85\xb4\x3b\x4c\x46\x9f\x7d\x68\xf4\xd9\xa3\x67\xbc\xa4\x0c\xad\x7d\xe8\x0b\x8d\x80\xd1\xcc\x29\x18\x5f\xb8\x1c\xc0\x9a\x33\x4a\x54\xe0\xd5\x20\xeb\x0b\x6f\xb4\x01\xae\x86\x1b\x75\xa9\xf2\xd0\xfc\x61\xc8\xfb\xb9\x99\xa8\xb3\x3a\xd0\x4b\xab\x53\x66\x55\xc9\x64\xbe\xf9\x47\x90\xe7\x0b\xfb\x17\x0a\x2e\x47\x76\x72\x74\xa1\x61\x25\x73\x68\xdb\xbe\x0b\x45\xac\xf4\xa0\xcd\xb2\x70\x1f\x78\x9e\x0e\x7d\x26\x85\xb4\x1e\x64\xc9\x2f\x33\xf6\x35\x94\xa2\x77\x60\xaa\x70\x61\x19\x4e\xe0\x51\xfc\xc0\x9d\xb4\x44\xf8\x59\xea\xda\x9a\x5f\x33\x0a\x54\xba\x4f\xd7\xa5\x60\x8d\xa0\x63\x78\xc3\xfe\x9e\x86\x4d\x4a\xd1\xba\x80\x57\x69\x44\x7b\xf8\x8d\xb2\xd4\xe4\x0c\x4d\x86\x37\xd3\x8a\x8e\x01\x4d\xa5\x0e\x32\x68\x7a\xed\x34\xbd\x02\x8b\x87\xed\x48\x07\x86\xd5\x47\xd6\xf4\x5a\xf7\x54\x97\x9b\xdb\x7e\x65\x9b\xc9\x7f\xdb\x6a\x6d\xa6\xb4\xf7\x64\xa9\xd5\x66\x11\x68\x1f\xfb\x7d\xcb\xa6\x63\xbf\xc9\xc1\xf3\xff\xf9\xd8\x3a\x96\x99\x05\x3a\x5e\xfa\xa1\xe8\x71\xd9\xb8\xbb\xd9\x1b\x59\x26\x87\x75\x97\xe9\x4c\xd4\x7e\x32\x77\xa6\xb6\x32\x59\x56\x5f\x9d\xe5\x69\xb8\xf3\xb6\x53\x7f\x3e\x8f\x5e\x74\x26\x16\xe8\xcd\xa4\xa6\xd5\x47\x1f\x78\x2c\x87\xc1\x20\xb3\xa5\xd8\x4b\xbe\xbd\x20\xdc\x24\xbf\x41\xdf\xd4\xc7\xb6\xf9\xbd\x9a\x19\x70\xf3\xe6\x7e\x6b\x51\x19\xdf\x30\xa5\x8e\x22\xf0\x71\x1e\xcf\xfb\x17\x00\x00\xff\xff\xe3\x18\xda\x70\x44\x05\x00\x00")

func bindataDataDogsTxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDogsTxt,
		"data/dogs.txt",
	)
}



func bindataDataDogsTxt() (*asset, error) {
	bytes, err := bindataDataDogsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/dogs.txt",
		size: 1348,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1607092687, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataMetalsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x52\xd1\x8e\xed\x20\x08\x7c\xf7\x2f\xa9\x72\x2a\x59\x04\x83\xd8\x9b\xee\xd7\xdf\x14\x7a\xf6\x89\x81\xc8\xe0\x0c\x40\x75\x12\xda\xa3\x00\xef\x41\xf2\x80\x81\x46\xf5\x29\x1d\x60\x11\xd0\x7e\x90\x5f\x74\x73\x22\x5a\x63\x7b\x2f\x87\xf6\x78\x53\xa1\x8d\x8c\x5c\xdf\x48\x1f\xb5\x60\xae\x98\x4f\x70\x45\xe8\xa6\xf9\x54\x0f\x60\x2f\x55\x27\x9a\xe4\xc0\xaa\x73\xa2\x95\xba\xa3\xa1\x81\x8d\xe5\xd0\x3c\x92\x7d\x04\x59\xbb\xd7\x34\x0d\x26\x24\x59\x8e\xf9\x7b\xb4\x23\xc2\x36\x9d\x0f\xf8\xa0\xc5\x90\x0f\xa3\xe9\x15\xc8\x40\x62\xc8\x09\x4d\x39\xbb\x4e\x48\x35\xa7\x72\x2b\x1d\x3e\x51\xec\xb0\x82\xbe\x2b\x07\x05\x49\x8b\x60\xf4\x46\x95\xc2\x20\xde\xe1\x71\x8b\xe1\x9f\x61\x12\x33\x42\x2b\x4c\xde\x23\xa1\x0b\x6d\x68\x08\xe1\xed\x18\x22\x06\x9c\x92\x2e\x0c\x90\x13\x04\x17\x96\x81\xe4\x92\x0e\x0d\x94\x86\x8c\x57\x62\xab\xdb\xee\x32\x94\xef\xa3\xe1\x33\x6a\xe8\xaa\xa9\x45\x50\xdb\x3d\x12\x4d\xdf\xf1\x6d\xa1\xfa\x83\x5c\x84\xba\xbe\xb9\x86\x25\xa2\x47\x2e\x4f\x57\x74\x4c\x60\x86\x50\x32\x19\x3c\x36\x3e\x79\x7b\x36\x4d\xe5\x2f\xf0\xd7\x86\x69\xb0\xfe\xc6\x4d\xd3\x81\x29\x70\x9a\xfa\xdf\xf1\x58\x32\x5a\xc7\x4c\xbb\x66\xae\x28\x7e\xbe\xb5\x7d\xa4\x81\xb6\xfd\xfb\xec\x41\xf6\x51\x8b\xfa\x82\x91\xf7\xb6\x2a\xa4\xe5\x0b\xe1\x50\x3b\x03\x12\x5f\x68\x65\x25\xef\x72\x53\x09\x47\x1d\xc4\x9f\xcb\x2d\x8e\xb5\x4b\xba\xec\xef\x31\x78\x7f\xd7\xeb\x3d\xf7\xe0\x7d\x67\x4e\x52\x9c\x1c\xe2\x13\xbe\xe5\x5c\x8e\x52\xb6\x65\xe1\x02\x49\x35\xb7\x7f\x99\x6e\xf7\x20\xf8\x25\xa9\xe5\x97\xac\xa6\x49\xff\x03\x00\x00\xff\xff\xca\x6c\x8b\x01\x3c\x03\x00\x00")

func bindataDataMetalsTxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataMetalsTxt,
		"data/metals.txt",
	)
}



func bindataDataMetalsTxt() (*asset, error) {
	bytes, err := bindataDataMetalsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/metals.txt",
		size: 828,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1607097025, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/colours.txt": bindataDataColoursTxt,
	"data/dogs.txt":    bindataDataDogsTxt,
	"data/metals.txt":  bindataDataMetalsTxt,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"colours.txt": {Func: bindataDataColoursTxt, Children: map[string]*bintree{}},
		"dogs.txt": {Func: bindataDataDogsTxt, Children: map[string]*bintree{}},
		"metals.txt": {Func: bindataDataMetalsTxt, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
