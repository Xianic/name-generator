// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/colours.txt
// data/dogs.txt

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataColoursTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x57\x5b\x9a\xc4\x28\x0b\x7d\x67\x2f\xfd\xef\x89\x28\x89\x74\xa1\xd8\xa8\x55\x9d\xda\xd1\xac\x63\x36\xf6\x7f\xc7\xea\x79\xc8\x01\xef\x37\x38\x10\x3e\x86\xdb\x9a\x42\x9c\x34\x13\x4b\x38\xf1\x19\x9a\xb8\x11\x6b\x10\x1b\x1f\x3c\xa6\x40\xd3\x24\xc4\x66\x7e\x13\x5b\xf5\x96\x89\x2b\x07\xb7\x59\xa0\xbc\xbd\x11\xd7\x03\x1d\xab\xcc\x72\x8f\x49\xdc\x72\x38\x26\x6d\x53\x7f\x96\x10\x3b\x71\xef\x26\xc4\x3d\x34\xf9\x24\xfe\x59\xbc\xa1\x72\x68\x13\xe2\x48\x53\x13\x71\xd4\x9b\x38\xa6\xa6\xe2\x0f\xd4\xde\xa6\x59\x88\x47\x21\x1e\x9d\x83\xaf\x35\x88\xa7\x57\xf4\x5d\xc7\x8a\x46\xbc\x42\xdc\xb4\x11\x3f\x3d\x71\x76\xe2\xf7\x0a\xa1\x83\x1b\x37\xa6\x83\xe3\x50\x94\xa2\xd1\xc1\x73\x9a\x8c\xa2\x9d\x0e\xe1\x05\x78\x4a\xd0\x21\x7a\x09\x1d\x7a\xd1\xa1\x03\x9b\x3d\x74\x4c\xcc\xa0\x13\x87\xff\x88\xf1\x12\x99\x74\x18\xa7\x07\xb0\xa5\x22\x19\xca\x98\x5f\x7e\x9e\x74\x98\x2c\x3a\x4c\xdf\x6f\x0e\xd4\xe3\x8a\x0e\x73\x07\x62\x46\x5b\xf2\x75\x05\xdf\xff\x69\x22\xed\xa3\x3e\xd5\x6d\x4f\xbc\x64\xea\xb9\x0c\xda\x28\x74\xb8\x09\x1d\xde\x00\xd8\x34\x1d\xc1\x2d\xdf\x74\x84\x62\x03\xa1\x57\x99\x10\x66\xca\x6d\x6b\x6d\x57\x4f\xc5\xe0\xf0\xf6\xc6\x10\x7f\x35\x3a\x62\xb5\xf1\xda\xa3\x56\xa6\x63\x61\xb3\x2b\xae\xb5\x67\x5b\x61\xf7\x6b\xef\x72\x45\xd3\xb1\xcf\xb4\x02\x13\xde\x6f\x3c\x1d\xd6\xff\x68\xab\x52\xe2\x2c\x13\x58\x3f\xa5\xf3\xdf\x7f\x28\x71\x3d\x42\xf3\x25\xd0\xc4\x36\x3a\x25\x6e\x1c\x37\x44\x06\xf6\x50\xe0\xc2\xe0\xc8\xda\x18\xfd\x42\x8f\x43\xb8\x41\xab\x58\x27\x71\x34\x9e\xea\xbb\xa6\x09\xce\x05\x0d\x2f\xcb\x50\xc2\x31\x7c\x4c\x93\xb9\xfb\x4c\x7e\x1d\x4c\x49\x32\x07\x25\x31\xce\xa8\x15\x93\x31\x05\x12\xc6\x94\x24\x74\xa0\x14\xcb\xf6\x52\x17\xa5\xc2\xb5\xf3\x85\xf5\x0a\x47\x72\x6c\xa5\x70\x60\x18\xc6\x17\x8e\xba\x71\x86\x2c\x0c\x2d\x12\x38\x48\x91\x31\x1b\xf6\x5f\xd4\x14\x88\x3d\x15\x6d\xb2\xfb\x78\x72\x63\x2c\x5b\xc2\xab\x50\xd2\x26\x21\xbe\x06\xb4\xc6\x07\x36\x08\xa5\x62\x05\x9d\xdb\xdc\x21\x51\x34\x0e\xdc\xa9\x1f\x6c\x10\xc9\x99\x92\x9f\xa7\x08\x25\xb7\x55\x0f\x45\xb9\x5d\x4e\xc9\xdd\x28\x79\xef\x12\x94\xfc\x67\x89\x6d\x37\x4a\x1e\x38\x82\x47\xf6\x27\x4e\xe8\xf1\x01\xb1\x5d\xdb\x4e\xf3\xd7\x1e\x11\x6d\xa8\x3d\x28\xf9\x80\xeb\x24\x9f\xfb\xbc\x7e\x3b\xf6\x1d\xc2\x95\x52\x68\x1d\xa8\x8c\x7b\x4c\x4c\xba\x6c\xae\x90\x4c\xe9\xc6\xcc\x37\xfc\x3b\xdd\xc9\xb8\x4a\xa3\xcc\xf1\x00\xcc\xea\x6b\x16\xca\x22\x9d\xb2\x34\xad\x94\x65\x48\x4c\xca\x50\x3d\x5f\x12\x94\xfd\xda\x36\x96\x83\x0f\xca\xeb\x21\x94\xd7\x4c\x85\x84\x63\x16\x92\xc3\xdb\x4d\x92\x62\x91\x48\xa8\x90\x5c\x57\x37\x18\xb5\x5c\xd7\x28\x38\x88\x5c\x77\x9f\xb0\x07\x38\x6a\xbb\x82\x17\x89\x49\x9a\xa1\x89\xa4\x4a\xb0\x65\x12\x18\x51\x4b\x42\xd2\x2e\x83\x13\x48\x68\xa3\x6d\x2b\x27\x88\xeb\x05\xb1\xe8\xe4\x96\x19\xf7\x79\xf2\x28\xba\x1b\x5f\x8d\x4e\xb1\xbc\xa7\x3d\x25\x1a\x9d\x2a\x96\x81\x71\xd3\xa9\x21\x1b\x3e\x8e\x77\xe2\xf4\xc0\x5f\x3a\x4d\x63\xd2\x69\xfb\x01\x4e\x5b\x1e\x32\x92\xb4\x49\x27\xb4\x49\x67\x48\x4b\x85\xce\xf0\x31\x0f\x9d\x42\xe7\x4a\x65\x28\xd3\xb9\xec\x09\xe3\x38\xd7\xfb\x7d\xd3\xc5\xda\xc6\xe1\xe1\x74\x71\x3d\xfc\x12\xba\xa4\x09\x4e\x76\x15\x1f\x93\x2e\xe3\x95\xd0\xfd\x32\x1f\xe3\xa6\xcb\xe9\x72\xcb\x1b\xa4\xfd\x89\xf0\x4c\x57\x70\xc3\x32\x90\xed\xa6\x4d\x36\x1f\x9e\xd9\xf8\xb5\x79\xe8\xa3\xee\x07\xfd\xa8\xb7\xec\xbb\xb9\x62\x99\x39\x5d\xab\x55\xc1\xdb\x17\x6e\xf8\x06\xd3\x76\x8e\x9f\xa5\x28\xc7\x13\x07\x2b\xc2\x00\x53\x9f\xe1\x5d\xa8\xb8\xfd\x91\x48\xf1\x26\x77\x96\x17\x14\xb7\x65\x8b\x8a\x4f\x2a\xab\x81\x46\x35\xc9\x21\x71\x91\xa6\x29\xdb\x05\xd4\x6c\x55\x85\xcf\xb7\x8b\xb4\x76\x09\x65\x23\x6d\xa9\xbc\x3c\x2a\x69\xcb\xd2\xa5\xe5\xfd\xa8\xda\xb2\xf2\x07\xdb\x16\x97\x93\x62\xda\x0f\x65\x60\x5c\xe8\x20\x8d\x90\xa1\x63\xea\x61\x42\x3a\xf8\x10\xb3\xbd\xd4\xe4\xcd\x27\xfa\xf4\xb8\xe9\x9b\xb3\xd0\x37\x77\xde\xee\xfb\xcd\x63\xf3\xcf\x37\xbf\xdf\xc7\xf6\xf6\x6f\x99\xf4\xed\xed\x67\xa9\xd1\xf7\x42\xd3\x6a\x97\x09\x3d\xc4\xec\xa6\x87\xf4\x2e\x46\x0f\xb9\xe9\x51\xf8\xa1\xf4\xf0\x43\x00\x5b\xd3\x54\x98\x1e\x5e\x8f\x45\x8f\xb1\xc8\xb8\x5d\x4b\x33\x19\x77\x1d\x64\x3c\x24\xc8\x10\xb0\x8c\x8c\x9f\x0c\xc0\x11\x51\xf9\x6a\x64\x02\x8a\x30\x3d\x24\xe6\x4d\xb6\x39\xde\xd4\x38\x91\x69\x15\x32\x6d\xc9\x0d\x1d\x9a\x00\x77\xdf\x21\xc1\x90\x3b\x48\x98\x22\x9e\x99\x3e\x35\x53\x65\xb0\x67\x53\xaa\x9c\xb1\x42\xe5\x4b\xda\x64\x48\x4d\xc0\xe6\xa6\x28\x16\xbf\xb8\xdd\x54\x59\xdf\x42\x95\xbf\x3d\xc4\x0c\x9a\x71\x2a\xb0\xa8\xca\x8d\xa7\x6c\x99\x11\xac\xa1\x5c\x0e\x9c\x3a\xa8\x82\xd2\x81\xba\xed\xb2\x72\xb8\xa3\xcb\x7a\xca\x07\x0d\xd6\x5b\xf9\x57\xeb\xaa\x54\x19\x2b\xdd\x4c\x55\x32\xa2\x48\xfd\xd8\x5f\x15\xc3\x20\xd8\x9e\x61\x77\xf2\xbb\xb3\x90\xaa\x39\x63\x2b\x9a\xdb\xbe\x8c\xaa\x0f\x04\xf8\xaa\x55\xa9\x2a\x76\x83\x42\xbb\x00\xb8\x8e\xaa\x0d\x9d\xc6\xbc\xa9\x7a\x16\xaa\x1e\x6d\x37\xfb\x18\x54\x7d\xb5\xc9\xd8\x3e\x14\xe4\x02\xd2\xa8\x8e\x45\x75\xd9\xe7\xe1\xeb\x1a\x13\xe1\xbb\xde\x81\xdb\xac\xf7\x40\x14\x69\x9c\x91\x33\x3c\x9c\x1a\x77\x93\x41\x8d\x9f\xfc\x8d\xd2\xf3\xa6\x26\xde\xa8\xc9\x8b\x9a\xa6\x87\x18\x35\x6f\x5f\xbd\xf8\x74\x6a\x37\xb7\x37\x93\x27\x44\x1e\x4f\x25\x84\x70\x3f\x8e\x37\xda\x08\xa3\xf3\x76\xff\x92\x77\x36\xf2\x2e\xc1\xe4\xc1\xed\x92\x3f\xf1\x05\xf2\xfd\x53\xff\xfc\xd4\x23\x15\xcd\xe4\x8b\x7c\xc1\xa9\x7c\xcd\xe0\x6b\xc7\x1a\xff\xfd\xe4\x1b\xfe\x7b\x7a\x64\xea\x9c\xf4\xd4\x44\x9d\x1f\x3a\x26\x37\xea\x6c\x70\x35\xc4\xa9\xce\x06\x68\xe3\xa6\xce\x6e\x4e\x9d\x3b\xde\x04\xf9\x55\x46\xc4\xec\x1c\xa9\x54\x90\x59\x67\xf8\x55\x47\x1a\x68\xd4\x79\x86\xa2\x89\xba\xf0\x07\x63\x83\xdd\x04\xf7\x7d\x69\x7b\x60\x66\x89\xca\x6d\x8f\x96\x18\xf0\xbb\x2d\x2b\x8c\xbb\xcb\x0b\xfb\xee\xc5\xfc\x97\x7a\x99\x85\xb1\x3c\x42\x99\x08\xe4\xf4\xcd\x02\x5d\xaf\xeb\xa6\x8e\x2b\xea\xc8\x6c\x3a\xce\x90\x8a\x3a\xf5\x7d\x8a\x55\xa9\xdb\x1f\x74\xea\x6e\x9f\xdc\xa5\xfb\x2e\x75\x3c\x23\x75\x8f\x69\xdc\x50\xfb\x82\x03\xf4\xd0\x96\x76\x40\xe8\xe1\x49\xc6\xa0\x1e\xf0\xee\x1e\x6b\x7c\x76\x39\x6e\x64\x75\x88\xac\xd4\x57\x12\xea\xcb\xac\xa2\x61\xd5\xfe\x50\xc8\x40\x0a\x0b\xb1\x90\x1f\xd0\xcf\x02\xbf\xfe\x2c\x84\x06\x70\x24\xa7\xd0\x8c\xa4\x0d\xf7\x98\xd8\x28\x58\x87\x36\x0a\xfe\xe6\x42\xc1\xa3\x7f\x0c\x2d\xf8\x45\x78\xdc\x90\xbc\x89\x33\x64\x27\xe2\x30\xe1\x28\xf7\x2c\x95\x42\x53\xa1\xd0\xd3\x84\xc2\x0f\x4c\xe1\xe9\x21\x93\xc2\xbf\x9d\xc2\xb1\xab\xf0\x21\x1b\x3e\x53\xf8\x18\x68\x19\x37\x85\xdf\x58\x7a\x21\x60\xc7\x3a\x70\x89\xb1\x8e\x9b\x62\x9d\x30\x14\x1c\x17\x33\xfd\x9d\x3a\xd6\xd8\x85\x79\xd3\xe0\x14\x88\xee\xd3\x69\xf0\xf6\xbc\xc1\xa7\xec\x86\xf3\x44\xba\x32\xf8\x42\x1d\xfe\x00\x68\xe0\x6a\xc7\xce\xf0\x06\x77\x7c\xbd\x20\x58\x0e\xbc\x0f\x8d\x84\xb8\x31\x69\xa4\xc2\x6b\x0c\x48\x24\x30\x43\x18\xdf\x56\x3e\xb1\x7d\xec\x48\x0e\x9f\x18\xd2\x95\x69\x14\xce\xfe\x82\xa8\x38\x32\x8d\x82\x2b\x1e\x45\x6b\x45\xd8\xb8\xa0\xb6\x9b\x46\xf1\xf4\xd8\x45\x95\xd6\x98\x86\x1a\xa8\x6f\x68\xf3\x3d\x8b\xbe\xdf\xb6\x9b\xc1\xce\x86\x0c\x7d\x3c\x6e\x1a\x3b\x4d\x1b\xa6\xf5\xa6\x51\x75\x33\xc0\xa8\x8e\x96\x86\x45\xdd\x34\xd3\xf0\xa6\x89\x46\xe7\x24\x40\xa4\xc5\x34\xfa\x67\xed\xf9\x3f\xda\xb6\x35\xa6\x88\xd1\x98\x0a\xc0\x6b\x8e\x75\xa1\x1a\x81\x02\x13\xad\x86\xf0\x3b\x56\xc3\x4d\x8f\x85\xa4\xed\xf3\x03\x31\xee\xe0\x84\xcc\x12\x2e\x39\xe1\xda\x3b\x16\xce\xcd\xa8\x93\x63\xd2\xe4\xd5\x85\xa6\x30\x3e\xa3\x29\x26\xff\x51\xf7\x94\xd6\xfe\xfd\x87\xa6\x44\x30\xcd\xa2\x48\x86\x69\x96\xb5\x63\xdb\xd4\x04\xe7\x9b\x7a\x9e\xa0\xf3\xa9\xf8\x21\x7b\xb9\x9d\x34\x75\x72\x03\xd9\x4e\xaf\x3c\x9d\x10\xb6\xb7\x75\xce\x58\x42\x33\xee\x8e\xe1\xeb\x9c\x83\xe6\xaa\x87\xc9\x4b\x24\xd3\x5c\xf1\xb3\x1c\x6c\x30\xd7\xa6\xc3\xb9\x46\xda\x1d\x21\x6e\x9a\x2f\xfd\x44\xa8\x79\x07\xd6\x5f\x4c\xcb\x66\xfc\xe1\xdf\x5f\xdd\xda\x7f\x85\xab\x1d\x06\xc2\x90\x4c\x0b\x39\xca\x16\x4f\x70\xc2\xbc\x09\x29\xc7\xe6\xb6\xd5\x69\xf5\x91\x61\x14\x0b\xb9\x0c\xe6\x1c\x7c\x32\x21\xb1\x7d\x72\x53\x33\xa6\xa7\x5c\x3c\xe8\x29\x4d\x76\x42\xf8\x94\xc8\x7a\x81\xa2\x9e\x12\x55\x77\x4c\x7c\x0a\xc2\x5e\x62\xfa\xfb\xb5\x7a\x6a\xe8\xce\x1b\x9e\x3b\x2e\x3e\xdd\x26\xbd\x90\xe7\xbf\x76\x26\xf3\xda\x31\xee\xa5\x96\xe9\xa5\x2d\x0f\x0f\x48\xd4\xec\xb4\xe5\x23\x3e\x89\xd4\x4b\xf1\x37\xac\x4c\xdb\xe3\x7e\xb9\x71\x5e\x10\xb3\x68\xa2\x1b\xa4\xfa\x47\xd3\x1f\xf1\x19\x74\x6b\xab\x8d\xde\xf0\x20\xa1\xb7\xd7\xfe\xff\x00\x00\x00\xff\xff\x06\x1f\x19\xf5\x76\x0f\x00\x00")

func bindataDataColoursTxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataColoursTxt,
		"data/colours.txt",
	)
}



func bindataDataColoursTxt() (*asset, error) {
	bytes, err := bindataDataColoursTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/colours.txt",
		size: 3958,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1607090991, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataDogsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x58\xcb\x9d\xf5\xaa\x0d\xdf\x53\x49\xb2\xa0\x28\x19\x64\xa3\x31\x46\x5c\x01\xe7\x31\xab\xb4\x91\x12\x52\x47\x3a\x49\x25\xf9\x09\xfc\x3a\x33\xdf\x5d\xcc\x20\x04\x06\xa1\xe7\x5f\x07\x66\xf0\x2c\x06\xe6\x19\x53\x68\x10\x1a\x0c\x3a\x53\x2a\x2e\xa0\xae\x2c\x01\x92\x0d\xdc\x92\x37\x40\x82\x1e\x22\xda\x8a\x22\xa4\xab\xeb\x04\x25\x18\x58\xa9\xc2\xf8\x6f\x5d\xe0\xe7\x4e\x66\xaa\x3b\x55\x02\xe6\x80\xe2\x0d\x44\x28\x2b\x24\xbb\x46\x44\xbb\x02\x9d\x8c\x0d\x22\x6c\xad\xa2\x81\x0d\x85\x1c\x24\x3b\xb5\x18\x3d\x2f\x17\x03\xd3\x12\xa9\x04\xeb\x98\xd3\x2e\xcf\xb9\x54\x56\xda\xd8\x7e\x6c\x9f\xf9\xf5\x63\x57\x00\x92\x88\xa5\x5c\xe2\x1f\x2b\x11\x39\x83\x78\xfb\xe3\x83\x4c\xb5\x8b\xf1\xfb\x83\xdc\x16\xd0\x95\x8b\x53\x2a\xcc\x33\x8b\x2f\x81\x04\x7f\x7f\xf0\x84\x8a\x62\x4b\x86\x44\x18\x0d\x24\xa8\x1c\x49\x3f\xdb\x35\x33\x64\xcf\x19\xd3\x37\xc6\xa8\x5b\x31\x25\xb5\x49\xf2\x68\xa0\x2d\x0b\xe9\x50\x0a\xa1\x67\xf6\xf1\x98\x64\xde\x94\xaa\x02\xfd\x34\x07\xb5\x46\x1c\x67\x5d\xdc\x15\x63\x1e\x9f\x1f\x1c\xc1\x2a\x84\x0f\x15\xf0\x62\x5e\x46\xfa\xcd\xb3\xa1\x95\xf5\xfd\xc7\x95\x08\x93\xdd\xe8\xf5\xc7\xb5\x53\x81\x3f\x37\xd4\xb6\xe5\xb7\xad\x40\xf1\x6f\x64\x3e\x15\xf8\x0d\x4f\x58\x83\x99\x40\x26\xac\x66\x82\x82\xe9\x8b\x74\x2c\xdd\x73\x95\xc0\x6a\x67\x68\x0f\xb4\x1e\xed\x24\x58\x61\x49\x78\x2c\x0c\x8b\xee\x93\xeb\xd9\x13\x3c\x40\xf4\x9e\x8d\x5b\xaa\x40\xc9\x16\x87\xe9\xdc\x8e\xc3\xb8\x13\xc2\x12\x71\x0c\x2a\xcc\x84\x20\x1e\xbd\x75\x1c\x23\x29\xdf\x47\x4a\x4b\xe5\x4b\xdc\x09\xe3\x42\xc3\x9d\x29\x31\x95\x93\x51\x02\x62\xd6\x37\x1e\x8c\x8a\xf2\x68\x82\xc9\x4c\x28\x0b\x6c\x50\x1c\xdf\x37\xc9\x82\x62\x33\x39\x10\x15\x47\xd2\x61\xf6\x4e\x17\xbc\xe4\xee\xdb\xc9\x05\x4e\x76\x16\x2a\x68\x26\xc2\x27\xca\x25\x51\x04\xb7\x5a\x48\xde\x56\x75\x90\x33\x76\x06\x7f\xe3\x56\x83\x75\xed\xd8\x27\xea\x55\x37\xf5\x4f\x91\xd9\x1f\x1f\x34\xb4\x11\xdc\xbb\x53\x95\xdc\x7a\x3f\x8d\xdd\xaa\xdb\x19\x65\x62\x8c\x66\xe2\x25\xe2\xed\x18\x0e\xb8\x7d\xf8\xd8\xc4\x91\x17\x7d\x89\x99\x58\x86\x25\x59\x3c\xca\xa9\xdb\x31\xbb\x34\x32\xe6\xd7\x81\x72\x28\x84\xe5\x9b\xc9\x4c\x5c\x02\x05\x1d\x4a\xff\xba\xa8\x55\x26\x7e\xf5\xbd\xe5\xc3\x44\x1f\x53\x9b\x71\xa5\xb4\x74\x95\xd2\xcb\x4c\xdc\x1e\xca\xf5\x58\xec\x1c\x21\x79\xc1\x62\x26\x7e\xed\x12\x8e\xe3\x5e\x78\x5d\xfe\xda\xa0\x12\x24\xa5\x9e\x48\xb1\xaf\xbf\x57\xf5\xa7\x3d\xd4\x27\x01\xe7\xd8\x52\xed\x7e\xcd\x3a\xff\xab\xa1\xf5\xcd\x4e\xdc\x64\xe2\x94\x40\xdd\x44\xa8\x5b\x5a\xa8\x56\x48\x6f\x33\x09\x07\x8e\x9b\x1e\xa7\x26\xc1\x58\xec\x22\x34\xcf\x9c\xcc\xd4\x96\xc5\xf4\xa0\xca\x48\xe6\x23\x3d\xe9\x64\x48\xda\x62\xec\x72\xf6\x1c\x7c\x64\x52\x1d\x37\x28\x95\xe6\x79\xa7\xbb\xe8\x0e\x48\x2e\xf5\x38\x48\x00\xc3\xad\x1c\x24\xb4\x8e\xa5\xb0\x51\x3f\xa4\x45\xf3\x18\xc6\x9e\x82\x65\x21\x65\x72\xa4\x04\xfb\xe6\x0a\x81\x5b\x84\x33\x71\x5f\x9c\x23\xbd\x0e\x6e\x73\x50\x7e\xa5\x3e\x07\x0f\x0b\xf6\x0b\xdc\xaa\x24\xa8\x3f\x77\x42\x5f\xa3\xa3\xc6\x9f\x55\x4b\x59\x17\x40\xb3\xf8\xa9\x60\x5d\xcd\xcc\x46\xe3\x57\x20\xda\x3f\x1d\x8e\x65\x7d\x5f\x2f\x0c\x30\x0d\x97\x73\x61\x04\xb8\x0b\x58\x20\x23\xac\x68\x27\x78\xdf\xd2\x84\x0b\x64\x5d\xa0\x3e\xf6\x3b\x02\x2d\x7d\xb6\xd7\x4a\x17\x28\x8e\x23\xa9\x47\xa5\x13\x2c\x15\xfd\x39\x2f\x01\xa4\x9b\x49\x19\xcc\xab\x8e\xfa\xb0\x40\x99\xfa\xf0\x44\x4c\xa4\x02\xb0\xac\x63\x7c\x8e\x0a\xda\xa9\x33\x5a\x5c\x68\x8b\xfe\xd3\x1c\xec\x48\x12\x3a\xb6\x1e\x63\xfc\xdf\xbf\xfe\x8d\x35\x81\x71\xb1\x6d\xd3\xad\xbe\x38\x76\x2b\x0c\xc9\x94\xea\xa2\xf7\x08\xbd\xed\xe8\x61\xd6\x0d\x69\x29\xb5\x41\x75\xa5\xb0\x6c\xf7\x48\x75\xac\xe1\xe2\xd1\xd6\x16\x11\xc4\x38\xe1\xee\x37\x57\x6c\xba\x26\xf1\x6d\x1d\x43\x45\x7f\x53\x9e\x07\x17\x46\x92\xee\x94\x96\x32\xe3\xe1\xf0\x3a\x0f\xc9\x13\x5a\x4f\x69\xe3\x54\x4f\xe3\x78\x48\xea\x9e\x3a\x94\x60\xcb\x13\xbd\x8e\x33\xc8\xa6\x37\x79\x6c\xb5\xe3\x12\xfb\x04\x17\x2a\xc6\x71\x28\x4f\x1a\x91\x32\x88\xad\x17\xee\x1d\xbe\xf8\x91\x97\x3c\x2f\x6c\x41\x16\x4c\x95\x12\xeb\xb4\x8d\x6a\xa1\x59\x05\xda\xcb\xf8\xee\xd0\x7e\x58\xc1\xf3\x4b\x2b\xab\xee\x7b\x45\x34\x5e\x30\xf5\x5b\x6d\x86\x2a\xf4\x55\x02\xeb\xa5\x32\x1e\xd9\xaa\x0b\x97\xb2\x2e\x8c\xf2\xa1\xed\x83\x7d\x62\x92\x83\x51\xb0\x56\x94\x6b\x9a\x45\x93\xd1\xef\x0f\x2b\xbf\x6f\xbc\x1a\x71\x6a\x5d\x0d\x1f\x65\x00\x4b\x15\x8c\xf0\x83\xd9\x04\x8a\x6a\x76\x26\x8c\xfe\x3c\x64\x26\x8d\x54\x5d\x8a\x48\xc2\x66\xa6\xd4\x35\x1e\x21\xe7\xae\xd4\x83\x51\x32\xd5\x6f\x33\x47\xa8\xbf\x2d\x3c\xf3\xeb\x34\xdc\x2c\x98\x5c\x38\x83\xff\x36\xdd\x63\x65\xe7\x9c\x02\xf4\x69\xe5\xd4\x29\x8d\xc2\x65\xd8\x2e\x72\x5a\x42\x47\x9a\x36\x33\x25\x55\xcf\xf2\xc3\xaa\xfb\xfc\x23\xc6\x7f\xf2\x0e\xe8\xf1\x6b\x41\xb8\xd6\x91\xaa\x7b\xc6\xbf\x2d\x8f\xa4\x70\x32\x58\xea\x9f\xe5\x18\x2a\xd9\x27\x4f\x12\xfc\xb9\x8d\x20\x55\x5b\x5c\x48\xd0\xbe\x75\xae\xa5\x90\x67\x4b\x1b\xc0\x95\xac\x17\x75\x56\x8d\x84\x85\xa3\x1f\x37\x73\xf4\x98\x0e\xdf\xb9\xd4\xbc\xf3\x3f\xcc\xba\xf3\x7e\x6d\x3a\x19\x7b\x8e\xde\xd9\xa7\x83\x8e\xf9\x5e\xbe\x96\x91\x04\x16\x2d\xa6\xe9\xf0\xc5\x45\x10\xaa\xf5\x90\x70\x27\xf3\x5b\x30\x21\x96\x31\x55\xe7\x7c\x52\x29\x3f\xc4\x11\x7c\x8f\x37\x08\xbe\x87\x8b\x07\xd8\x28\x56\x4e\xa5\xf2\x03\x04\x4d\x80\xc4\x8f\xfe\xe2\x81\xb5\x8e\x5d\x43\x1b\x01\x1e\xd0\xe1\x40\xe0\x75\x05\xf2\x6c\x42\x97\x3f\xf0\x03\x9e\x20\xd5\x68\xf2\xd3\x2e\xa3\x27\xc1\x5d\x7e\x9a\xe8\xfb\x6c\x4e\xc8\xa1\x16\x6c\x72\x57\x62\x22\x51\x0f\x56\xd3\x28\xfe\x79\x06\xaa\x78\xbc\x72\x2c\x7d\x4c\x0e\xc3\x8c\xd9\x27\x60\xdf\x79\x1c\xe7\xfd\xb2\x51\xce\xed\xf5\xdc\xaf\x0e\xb3\x7a\x95\xe8\xa4\x96\x8d\xaf\x03\x52\xe1\xad\x48\x2b\x73\x24\xc3\x2f\xc8\x30\xca\x46\xa0\x74\xcd\x86\x7b\xad\x40\x76\xc5\x64\x56\x10\xec\x57\x29\xf8\xec\xba\x5e\x11\x47\x0a\x5a\x51\xe4\x6d\x3b\x2e\x3b\x0e\xef\x15\xf2\x34\xf6\x4a\x25\xb4\x71\x0a\x6f\x9c\xd4\x3e\x2b\x33\xad\x28\xfa\xfd\x17\x9a\x95\x05\x21\xd9\x2f\x4a\x7e\x74\x4f\x6b\x7b\x40\xf9\x36\xeb\x9b\xb4\x68\x1b\xc5\xf6\x87\x57\x47\xd8\xb1\xa7\x52\x1b\x08\xa4\xc1\x94\x81\x95\x3b\xd5\xbd\x66\x50\xc3\x42\x3b\x7d\xf7\xe6\xce\xea\xdd\x92\x92\x5a\xd1\x22\x2c\x5c\x2b\x5b\xe1\x0d\x96\xc4\x51\xef\x5d\xbb\x31\xcf\x77\x45\x48\x0e\x46\x6b\x15\x10\x15\x66\x45\xe4\x34\x60\xb2\x89\x01\x0a\x58\xc8\x85\x07\xa9\x36\x88\xfc\x74\x01\x93\xd9\x20\x56\x95\x79\x1f\xad\xa2\x44\x5b\xbf\x5b\x67\x90\xee\xdc\x20\x69\xfd\xaf\x37\x74\xa9\x20\xa9\x7b\xf3\x81\x96\x36\x4a\x04\xb5\x09\x5e\x39\xe8\x62\x5d\x81\xbe\x8d\xfa\xb1\x35\x4f\x66\x6b\xb5\xda\x7f\x6c\xf4\x42\xff\x4f\x93\x10\x32\x47\xaa\xbd\x33\x18\x47\x26\x7c\xce\xea\x38\xfa\x4c\x93\x58\x66\x8e\xeb\x29\x40\xd2\xdc\x83\x92\xb4\x32\x53\xed\x96\x49\x2c\x4f\xec\x9d\xc3\xd4\xba\xf7\x5c\x0c\x8c\xeb\xf0\xc1\x8b\x15\xb5\x6f\x3c\xb7\x91\x0b\xb7\xa3\x1f\x60\x8b\xe3\x4a\x60\x7d\x73\xab\xad\x9a\x04\xd2\x72\xb3\x10\x47\x7f\x36\xdb\x67\x2c\xb1\x46\xca\xb8\x26\x43\xa6\x18\x39\x75\x42\x55\x98\x41\x17\x3f\x7e\x19\xc8\x88\x03\x77\x9c\xf8\xda\x64\xdc\x26\xe1\x15\x3f\x30\x64\xc6\xaa\x89\x7a\xf4\x67\x3b\xc4\xb5\x0f\x4c\xfe\xbf\xff\xc1\x64\x72\x00\x01\x0e\x7b\x84\x67\xaa\xea\x2e\x39\x72\xad\x26\x6b\x96\xac\x76\x6f\xd1\x0e\x27\x55\x2d\x6b\x15\xe3\x67\x77\x9f\x53\xfa\xcc\xdb\x90\x86\x37\x0d\xcc\xcc\xdb\xf1\xdd\x86\x02\x49\xd3\x70\xe6\xad\x9f\xce\xdc\xc1\x67\x1e\x0e\x9c\x59\x6a\x5b\x9a\xba\x4e\x66\x8f\x69\x61\x9b\xf1\xaf\x86\x89\xef\x4b\xb7\x7b\x4e\xde\x48\x20\x9d\xd9\xfa\xdf\x00\x64\xb9\x2d\xfd\xe2\xb6\x74\x88\x68\x72\x8b\x64\x34\xc5\xee\x11\x33\xb2\xed\xcd\x51\x4e\xc6\x19\xd6\x02\x17\x5e\x12\xf4\x13\x77\x98\x7e\xb4\x62\x12\xd8\x63\xc7\xc0\x42\x7e\xc1\x49\x21\xb5\xd6\xbc\xee\xd0\x4a\x44\x34\x57\x0d\x34\x05\x28\xa9\x1a\x8f\x96\xe6\x9c\x27\x6d\x48\x0a\xc4\xb6\x92\x29\xb0\xf1\x1b\x75\xba\x75\x0c\x5a\x14\xc1\x66\x94\x15\x95\x4c\xfb\x97\x8e\x6b\x55\xed\x7b\x3c\x3c\xe5\x64\x1d\xe2\x16\x84\xf8\x0e\xb0\x5d\x0c\xd5\xdc\x91\x2d\xf4\x85\xfd\xf8\x80\xf5\xd3\x7e\x25\xd0\x04\x1d\xa7\x96\xd0\x9b\x5d\xd3\x03\x59\x4d\x7a\x46\x74\x09\x14\xf9\x86\xc5\x34\x5d\x0c\xd3\x96\x30\x0a\x5d\xd9\x61\x76\xa1\x51\x7a\xf7\x5f\x35\x0a\xc5\x15\xb5\x92\xa7\xbd\xd5\x55\xc6\xd5\x2f\x94\xf5\x7d\xf9\x75\x89\xdc\x96\x40\xa6\x6c\x10\xa3\xdd\x5a\xd2\xc4\xa1\xb2\x6a\xaf\xb5\x3b\x61\xe1\xf9\x04\x4b\xcf\xa0\x35\xf3\x6a\xaf\x7a\x41\x29\xe1\xb4\x6e\xc9\x94\xd4\x7e\x67\x7f\x38\x20\x60\x37\x56\xa9\x30\xf5\xea\x62\x3e\x7f\x5c\xfa\xe8\xf9\xfa\xd2\x7b\xf0\xee\x0d\x5e\xa9\x90\xbc\x36\x5d\x57\x7a\x2a\x5a\x89\x5e\x67\x4d\x3b\xc0\xf5\x09\xf9\x0e\xc6\x03\xe2\x00\xd6\x15\xe8\xb9\xf7\x82\xfd\x3a\x55\x77\xc5\x17\x94\x23\x09\x57\x9a\xf0\x9e\xd4\x8e\xf9\x71\xc5\x31\x3f\x84\x55\x18\x7b\x07\x8d\x55\x20\x95\x77\x7c\x74\x33\xed\x51\x5e\x05\x51\xf3\x51\xc5\x94\xb0\x14\x44\x3b\x09\x25\x75\x8f\x63\xe5\x09\x71\xed\x00\xe7\x70\x79\x15\x18\xdf\x27\xf6\x7c\xd0\x77\x89\x60\x9e\x48\x47\x99\x1a\x19\xe7\x17\xba\x1e\xec\x43\x98\x27\x96\x6a\x03\x2d\x21\x5e\x68\xe1\xbe\x36\x7a\x82\x67\xf7\xfc\x6a\x9e\x61\xf8\xec\x4f\xfc\xa7\x02\x1e\xad\xfa\x8b\x23\x53\xfd\x76\x8d\x52\x8d\x64\xde\xea\x7d\x7a\x86\x12\x9f\xbf\x13\xfe\x3f\x00\x00\xff\xff\x59\x7e\x72\x65\x88\x15\x00\x00")

func bindataDataDogsTxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDogsTxt,
		"data/dogs.txt",
	)
}



func bindataDataDogsTxt() (*asset, error) {
	bytes, err := bindataDataDogsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/dogs.txt",
		size: 5512,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1607090991, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/colours.txt": bindataDataColoursTxt,
	"data/dogs.txt":    bindataDataDogsTxt,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"colours.txt": {Func: bindataDataColoursTxt, Children: map[string]*bintree{}},
		"dogs.txt": {Func: bindataDataDogsTxt, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
